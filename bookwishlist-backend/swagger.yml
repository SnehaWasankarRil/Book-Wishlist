openapi: "3.0.0"
info:
  title: "Book Wishlist API"
  version: "0.1.0"
  description: "Book Wishlist API with Node.js and Express.js"
servers:
  - url: "http://localhost:5003"

tags:
  - name: movies
    description: Everything about Movies.
paths:
  /movies:
    get:
      tags:
        - movies
      summary: Get all the movies.
      description: Get all the movies.
      responses:
        '200':
          description: Succesfully fetched all movies.

    post:
      tags:
        - movies
      summary: Create new movie.
      description: Create new movie.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movies'       
      responses:
        '200':
          description: Succesfully created new movie.

    delete:
      tags:
        - movies
      summary: Delete all movies.
      description: Delete all movies.
      responses:
        '200':
          description: Succesfully deleted all movies.

  /movies/{movieId}:
    get:
      tags:
        - movies
      summary: Get Movie details by providing MovieId.
      description: Get Movie details by providing MovieId.
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Succesfully fetched movie by its MovieId.
        '404':
          description: Movie Id not found!

    put:
      tags:
        - movies
      description: Update Movie details by providing MovieId.
      summary: Update Movie details by providing MovieId.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/movies'
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Succesfully updated movie details.

    delete:
      tags:
        - movies
      summary: Delete Movie data by providing movieId.
      description: Delete Movie data by providing MovieId.
      parameters:
        - name: movieId
          in: path
          description: ID of movie to return
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Succesfully deleted movie data by its ID.

components:
  schemas:
    movies:
      type: object
      properties:
        title:
          type: string
        gener:
          type: string
        duration:
          type: number
        artists:
          type: array
          items: 
            type: string
        directors:
          type: array
          items: 
            type: string
        released:
          type: string
        rating:
          type: number
          minimum: 0
          maximum: 10
        country:
          type: string
      required:
        - title
      example:
        title: MovieName
        genre: Genre of the movie
        duration: 120
        artists: [Aniket,Mukesh,Radha,Krishna]
        directors: [Vishwajeet,jhon,Peter]
        released: "2021"
        rating: 8
        country: India


# paths:
#   /:
#     get:
#       summary: 'Get all contacts!'
#       description: 'Retrieve all contacts'
#       responses:
#         '200':
#           description: 'Successful response'
#     parameters:
#       - name: showDetails
#         in: query
#         description: 'Specify whether to include additional details'
#         schema:
#           type: boolean
#           default: false

#   /:
#     get:
#       summary: "Check if the server is working..."
#       description: "To check if the server is working"
#       responses:
#         "200":
#           description: "Server is working"
#           content:
#             text/plain:
#               example: "Welcome to API"
# components: {}
# tags: []
